name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  HARBOR_REGISTRY: ${{ vars.HARBOR_REGISTRY || '34.32.141.92:30083' }}
  HARBOR_PROJECT: javdes
  IMAGE_NAME: bankapp

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn clean test
      
    - name: Build application
      run: mvn clean package -DskipTests
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifact
        path: target/*.jar

  build-and-push-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-artifact
        path: target/
        
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker
        driver-opts: network=host
        buildkitd-flags: --debug
            
    - name: Configure Docker for insecure registry
      run: |
        # Configure Docker daemon
        sudo mkdir -p /etc/docker
        echo '{"insecure-registries":["34.32.141.92:30083"]}' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker || true
        sleep 10
        
        # Configure Docker client
        mkdir -p ~/.docker
        echo '{"experimental": "enabled", "insecure-registries": ["34.32.141.92:30083"]}' > ~/.docker/config.json
        
        # Set environment variables for Docker and BuildKit
        echo "DOCKER_CLI_EXPERIMENTAL=enabled" >> $GITHUB_ENV
        echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV
        echo "BUILDKIT_PROGRESS=plain" >> $GITHUB_ENV
        
        # Export registry configurations for later steps
        echo "REGISTRY_HTTP=true" >> $GITHUB_ENV
        echo "REGISTRY_INSECURE=true" >> $GITHUB_ENV
      
    - name: Generate image tag
      id: image-tag
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "tag=prod-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
        else
          echo "tag=dev-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
        fi
        
    - name: Login to Harbor using Docker command
      run: |
        echo "${{ secrets.HARBOR_PASSWORD }}" | docker login ${{ env.HARBOR_REGISTRY }} --username ${{ vars.HARBOR_USERNAME || 'admin' }} --password-stdin
        
        # Verify login status
        docker info
        
    - name: Build and push Docker image (using Docker directly)
      run: |
        # Enable experimental Docker features
        export DOCKER_CLI_EXPERIMENTAL=enabled
        
        # Build image locally
        docker build -t ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }} .
        docker tag ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }} ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.IMAGE_NAME }}:latest
        
        # List built images
        docker images
        
        # Push using plain HTTP (not HTTPS)
        echo "Pushing image to ${{ env.HARBOR_REGISTRY }} using HTTP..."
        docker push ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }} || echo "Failed to push with tag"
        docker push ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.IMAGE_NAME }}:latest || echo "Failed to push latest"
        
        # Set output for downstream jobs
        echo "IMAGE_URL=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}" >> $GITHUB_ENV

  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout manifests repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/app-fatih-manifests
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        path: manifests
      continue-on-error: true
    - name: Update image tag in manifests
      run: |
        if [ ! -d "manifests" ]; then
          echo "Manifests directory not found, skipping update"
          exit 0
        fi
        
        cd manifests
        NAMESPACE=""
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          NAMESPACE="prod"
        else
          NAMESPACE="dev"
        fi
        
        # Check if the deployment file exists
        if [ ! -f "k8s-manifests/app/overlays/${NAMESPACE}/deployment.yaml" ]; then
          echo "Deployment file not found at k8s-manifests/app/overlays/${NAMESPACE}/deployment.yaml"
          echo "Available files:"
          find . -name "*.yaml" -o -name "*.yml" | head -20
          exit 0
        fi
        
        # Update the image tag in the appropriate overlay
        sed -i "s|image: .*bankapp:.*|image: ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push-image.outputs.image-tag }}|g" \
          k8s-manifests/app/overlays/${NAMESPACE}/deployment.yaml
          
        # Show what changed
        git diff
          
    - name: Commit and push changes
      run: |
        if [ ! -d "manifests" ]; then
          echo "Manifests directory not found, skipping commit"
          exit 0
        fi
        
        cd manifests
        git config --local user.email "fatihgumush@gmail.com"
        git config --local user.name "Golge"

        # Configure git to use the Personal Access Token
        git remote set-url origin https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository_owner }}/app-fatih-manifests.git

        git add .
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi
        
        git commit -m "Update image to ${{ needs.build-and-push-image.outputs.image-tag }}"
        git push

